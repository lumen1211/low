name: CI

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
  workflow_dispatch: {}

jobs:
  tests:
    name: Pytests (Ubuntu, Py3.11)
    runs-on: ubuntu-latest

    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Run unit tests
        run: |
          pytest -q --maxfail=1 --disable-warnings || (echo "Pytests failed" && exit 1)

  run_app_headless:
    name: Run app (headless) + capture screenshot
    # запустим только на PR и вручную; если хотите и на push — уберите условие
    if: github.event_name != 'push' || github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: tests

    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip

      - name: Install system packages (xvfb, imagemagick)
        run: |
          sudo apt-get update
          sudo apt-get install -y xvfb x11-apps imagemagick

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # ВАЖНО: замените команду запуска на реальную для вашего приложения
      # Например, если у вас PyQt/PySide GUI: src/gui.py
      # Мы запускаем под Xvfb, ждём несколько секунд, делаем скрин, сохраняем логи.
      - name: Run app under Xvfb and take screenshot
        shell: bash
        env:
          QT_QPA_PLATFORM: xcb      # для Qt/ПайСайд; можно попробовать offscreen, если окно не нужно
        run: |
          set -e
          export DISPLAY=:99
          Xvfb :99 -screen 0 1920x1080x24 &  # старт виртуального дисплея
          XVFB_PID=$!
          echo "Xvfb PID: ${XVFB_PID}"

          # Запуск приложения в фоне, вывод в лог
          (python src/gui.py > run.log 2>&1 &) || true
          APP_PID=$!
          echo "App PID: ${APP_PID}"

          # даём времени приложению отрисоваться
          sleep 8

          # скриншот всего экрана (окна) в файл
          import -window root screenshot.png || true

          # аккуратно завершаем приложение
          kill ${APP_PID} 2>/dev/null || true
          sleep 1
          kill -9 ${APP_PID} 2>/dev/null || true

          # останавливаем Xvfb
          kill ${XVFB_PID} 2>/dev/null || true

      - name: Upload artifacts (logs + screenshot)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: app-run-artifacts
          path: |
            run.log
            screenshot.png
